import _ from 'lodash';

import { Descriptor } from '../descriptor';

export default function definitions(descriptor: Descriptor): string {
  const macroPrefix = _.toUpper(_.snakeCase(descriptor.name));
  return [
    `#ifndef ${macroPrefix}_ALIGNMENT`,
    `${descriptor.indent}#define ${macroPrefix}_ALIGNMENT 64 /* Large enough for AVX-512 */`,
    '#endif',
    '',
    `#ifndef ${macroPrefix}_ASSERT`,
    `${descriptor.indent}#define ${macroPrefix}_ASSERT(condition) assert(condition)`,
    '#endif',
    '',
    `#if defined(${macroPrefix}_ALIGNED_ALLOC) && defined(${macroPrefix}_ALIGNED_FREE) && defined(${macroPrefix}_ALIGNED_REALLOC)`,
    `${descriptor.indent}/* valid */`,
    `#elif !defined(${macroPrefix}_ALIGNED_ALLOC) && !defined(${macroPrefix}_ALIGNED_FREE) && !defined(${macroPrefix}_ALIGNED_REALLOC)`,
    `${descriptor.indent}/* valid */`,
    '#else',
    `${descriptor.indent}#error "Must define all or none of ${macroPrefix}_ALIGNED_ALLOC, ${macroPrefix}_ALIGNED_FREE, and ${macroPrefix}_ALIGNED_REALLOC."`,
    '#endif',
    '',
    `#ifndef ${macroPrefix}_MALLOC_USABLE_SIZE`,
    `${descriptor.indent}#if defined(__APPLE__)`,
    `${descriptor.indent}${descriptor.indent}#define ${macroPrefix}_MALLOC_USABLE_SIZE(ptr) malloc_size(ptr)`,
    `${descriptor.indent}#elif defined(__linux__)`,
    `${descriptor.indent}${descriptor.indent}#define ${macroPrefix}_MALLOC_USABLE_SIZE(ptr) malloc_usable_size(ptr)`,
    `${descriptor.indent}#else`,
    `${descriptor.indent}${descriptor.indent}#define ${macroPrefix}_MALLOC_USABLE_SIZE(ptr)`,
    `${descriptor.indent}#endif`,
    `#endif /* ${macroPrefix}_MALLOC_USABLE_SIZE */`,
    '',
    `#if !defined(${macroPrefix}_ALIGNED_FREE) && !defined(${macroPrefix}_ALIGNED_ALLOC) && !defined(${macroPrefix}_ALIGNED_REALLOC)`,
    `${descriptor.indent}#if defined(__APPLE__) || defined(__linux__)`,
    `${descriptor.indent}${descriptor.indent}#define ${macroPrefix}_ALIGNED_FREE(ptr) free(ptr)`,
    `${descriptor.indent}${descriptor.indent}#define ${macroPrefix}_ALIGNED_ALLOC(align, size) aligned_alloc(align, size)`,
    `${descriptor.indent}${descriptor.indent}#define ${macroPrefix}_ALIGNED_REALLOC(ptr, align, size) do {\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}if ((size == 0) || (align <= alignof(max_align_t)))\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}{\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}${descriptor.indent}return realloc(ptr, size);\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}}\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}size_t new_size = (size + (align - 1)) & (~(align - 1));\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}void *new_ptr = aligned_alloc(align, new_size);\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}if (new_ptr != NULL)\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}{\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}${descriptor.indent}size_t old_usable_size = ${macroPrefix}_MALLOC_USABLE_SIZE(ptr);\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}${descriptor.indent}size_t copy_size = new_size < old_usable_size ? new_size : old_usable_size;\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}${descriptor.indent}if (ptr != NULL)\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}${descriptor.indent}{\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}${descriptor.indent}${descriptor.indent}memcpy(new_ptr, ptr, copy_size);\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}${descriptor.indent}${descriptor.indent}free(ptr);\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}${descriptor.indent}}\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}}\\`,
    `${descriptor.indent}${descriptor.indent}${descriptor.indent}return new_ptr;\\`,
    `${descriptor.indent}${descriptor.indent}} while(0)`,
    `${descriptor.indent}#elif defined(_MSC_VER)`,
    `${descriptor.indent}${descriptor.indent}#define ${macroPrefix}_ALIGNED_FREE(ptr) _aligned_free(ptr)`,
    `${descriptor.indent}${descriptor.indent}#define ${macroPrefix}_ALIGNED_ALLOC(align, size) _aligned_alloc(size, align)`,
    `${descriptor.indent}${descriptor.indent}#define ${macroPrefix}_ALIGNED_REALLOC(ptr, align, size) _aligned_realloc(ptr, size, align);`,
    `${descriptor.indent}#else`,
    `${descriptor.indent}${descriptor.indent}#define ${macroPrefix}_ALIGNED_FREE(ptr) free(ptr)`,
    `${descriptor.indent}${descriptor.indent}#define ${macroPrefix}_ALIGNED_ALLOC(align, size) malloc(size)`,
    `${descriptor.indent}${descriptor.indent}#define ${macroPrefix}_ALIGNED_REALLOC(ptr, align, size) realloc(ptr, size)`,
    `${descriptor.indent}#endif`,
    '#endif'
  ].join('\n');
}
